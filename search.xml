<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在docker中使用MongoDB</title>
      <link href="posts/37178aa8/"/>
      <url>posts/37178aa8/</url>
      
        <content type="html"><![CDATA[<p>新建mongodb数据存储目录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir -p &#x2F;data&#x2F;mongodb&#x2F;xxx_data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建启动脚本</p><pre class="line-numbers language-none"><code class="language-none">tee &#x2F;data&#x2F;startupMongoDB.sh &lt;&lt;-&#39;EOF&#39;docker run \--name mongodb-xxx \-d  \--restart&#x3D;always \-p 27017:27017 \-e MONGO_INITDB_ROOT_USERNAME&#x3D;root \-e MONGO_INITDB_ROOT_PASSWORD&#x3D;xxxxxxx \-v &#x2F;data&#x2F;mongodb&#x2F;xxx_data:&#x2F;data&#x2F;db \mongo:4.4.3-bionicEOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;datachmod +x startupMongoDB.sh.&#x2F;statupMongoDB.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在docker中使用MinIO</title>
      <link href="posts/7b2c2425/"/>
      <url>posts/7b2c2425/</url>
      
        <content type="html"><![CDATA[<p>新建MinIO数据存储目录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir -p &#x2F;data&#x2F;minio&#x2F;xxx_data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建启动脚本</p><pre class="line-numbers language-none"><code class="language-none">tee &#x2F;data&#x2F;startupMinIO.sh &lt;&lt;-&#39;EOF&#39;docker run \--name minio-xxx \-d  \--restart&#x3D;always \-p 9000:9000 \-e &quot;MINIO_ACCESS_KEY&#x3D;root&quot; \-e &quot;MINIO_SECRET_KEY&#x3D;xxxxxx&quot; \-v &#x2F;data&#x2F;minio&#x2F;xxx_data:&#x2F;data \minio&#x2F;minio server &#x2F;dataEOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;datachmod +x startupMinIO.sh.&#x2F;startupMinIO.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> MinIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何安装mysql</title>
      <link href="posts/183793f2/"/>
      <url>posts/183793f2/</url>
      
        <content type="html"><![CDATA[<h2 id="centos7安装mysql5-7"><a href="#centos7安装mysql5-7" class="headerlink" title="centos7安装mysql5.7"></a>centos7安装mysql5.7</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1.下载</span><span class="token function">wget</span> https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm<span class="token comment"># 2.安装yum源</span><span class="token function">rpm</span> -ivh mysql80-community-release-el7-3.noarch.rpm<span class="token comment"># 3.查看可用版本（enable）</span>yum repolist all<span class="token operator">|</span> <span class="token function">grep</span> mysql<span class="token comment"># 4.修改可用版本（需要的版本enabled改为1）</span><span class="token function">vim</span> /etc/yum.repos.d/mysql-community.repo<span class="token comment"># 5.查看可用版本（enable）</span>yum repolist all<span class="token operator">|</span> <span class="token function">grep</span> mysql<span class="token comment"># 6.安装mysql</span>yum <span class="token function">install</span> -y mysql-community-server<span class="token comment"># 查看初次启动默认密码</span><span class="token function">grep</span> <span class="token string">'password'</span> /var/log/mysqld.log<span class="token comment"># 用默认密码登陆mysql</span>mysql -u root -p<span class="token comment"># 修改root密码</span>ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'xxxxx'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何安装php环境</title>
      <link href="posts/66e9c7fd/"/>
      <url>posts/66e9c7fd/</url>
      
        <content type="html"><![CDATA[<h2 id="centos7安装php环境"><a href="#centos7安装php环境" class="headerlink" title="centos7安装php环境"></a>centos7安装php环境</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> epel-releaseyum <span class="token function">install</span> http://rpms.remirepo.net/enterprise/remi-release-7.rpmyum <span class="token function">install</span> yum-utilsyum search php73yum search php74yum <span class="token function">install</span> php74-php-gd  php74-php-pdo php74-php-mbstring php74-php-cli php74-php-fpm php74-php-mysqlndsystemctl status php74-php-fpmsystemctl start php74-php-fpmsystemctl <span class="token builtin class-name">enable</span> php74-php-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何安装nginx</title>
      <link href="posts/296035cb/"/>
      <url>posts/296035cb/</url>
      
        <content type="html"><![CDATA[<h2 id="centos7安装nginx"><a href="#centos7安装nginx" class="headerlink" title="centos7安装nginx"></a>centos7安装nginx</h2><p>添加nginx的yum仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/yum.repos.d/nginx.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>填入内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>nginx-stable<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>nginx stable repo<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://nginx.org/packages/centos/<span class="token variable">$releasever</span>/<span class="token variable">$basearch</span>/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://nginx.org/keys/nginx_signing.key<span class="token assign-left variable">module_hotfixes</span><span class="token operator">=</span>true<span class="token punctuation">[</span>nginx-mainline<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>nginx mainline repo<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://nginx.org/packages/mainline/centos/<span class="token variable">$releasever</span>/<span class="token variable">$basearch</span>/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://nginx.org/keys/nginx_signing.key<span class="token assign-left variable">module_hotfixes</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装步骤</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看可用版本（enable）</span>yum repolist all<span class="token operator">|</span> <span class="token function">grep</span> nginx<span class="token comment"># 默认时最新稳定版，要安装开发版的话，需要执行此行</span><span class="token comment">#sudo yum-config-manager --enable nginx-mainline</span><span class="token comment"># 安装</span><span class="token function">sudo</span> yum <span class="token function">install</span> nginx<span class="token comment"># 启动nginx并设置开机自启</span>systemctl start nginxsystemctl <span class="token builtin class-name">enable</span> nginx<span class="token comment"># 确认安装成功</span><span class="token function">curl</span> http://127.0.01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在docker中使用redis</title>
      <link href="posts/a5f76939/"/>
      <url>posts/a5f76939/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>安装目标：</p><p>启动两个redis，并开启密码保护、rdb持久化，数据和配置文件存放在宿主机。</p><p>选择一个适合的版本：</p><p><a href="https://hub.docker.com/">在docker-hub中选择</a></p><pre class="line-numbers language-none"><code class="language-none"># 此处选用6.2.1-alpinedocker pull redis:6.2.1-alpine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>准备存放持久化文件、配置文件的宿主机目录</p><pre class="line-numbers language-none"><code class="language-none">mkdir -p &#x2F;data&#x2F;redis&#x2F;&#123;a,b&#125;&#x2F;conf mkdir -p &#x2F;data&#x2F;redis&#x2F;&#123;a,b&#125;&#x2F;data <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编写配置文件redis.conf，并放入对应的宿主机目录内</p><pre class="line-numbers language-none"><code class="language-none">#bind 127.0.0.1daemonize norequirepass  123456 appendonly no tcp-keepalive 300 # 说明#bind 127.0.0.1 #注释掉这部分，使redis可以外部访问daemonize no #不需要使用守护线程的方式启动，交给docker来负责即可requirepass  123456   #给redis设置密码appendonly no  #aof持久化，按需修改即可tcp-keepalive 300 #防止出现远程主机强迫关闭了一个现有的连接的错误 默认是300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：</p><ul><li>要获取完整的默认配置文件，可以在<a href="https://redis.io/download">官网</a>下载解压后，查询redis.conf文件</li><li>密码按需修改，或者注释掉该行（即不用密码访问）</li><li>持久化配置额外配置参考<a href="https://redis.io/topics/persistence">文档</a></li></ul><p>启动redis</p><pre class="line-numbers language-none"><code class="language-none">docker run \--name redis-a \-d \--restart&#x3D;always \-p 6379:6379 \-v &#x2F;data&#x2F;redis&#x2F;a&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \-v &#x2F;data&#x2F;redis&#x2F;a&#x2F;data:&#x2F;data \--sysctl net.core.somaxconn&#x3D;511 \redis:6.2.1-alpine redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看是否启动成功</p><pre class="line-numbers language-none"><code class="language-none">docker psdocker logs redis-a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动成功后，可以通过一些工具访问此redis，如果启动过程中有Warning和Error，则可根据提示解决。此处列出两个警告及其解决方法。</p><h2 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h2><ol><li>启动日志有警告：</li></ol><pre class="line-numbers language-none"><code class="language-none">WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#39;vm.overcommit_memory &#x3D; 1&#39; to &#x2F;etc&#x2F;sysctl.conf and then reboot or run the command &#39;sysctl vm.overcommit_memory&#x3D;1&#39; for this to take effect.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决:</p><pre class="line-numbers language-none"><code class="language-none">echo &quot;vm.overcommit_memory &#x3D; 1&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.confsysctl vm.overcommit_memory&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>启动日志有警告：</li></ol><pre class="line-numbers language-none"><code class="language-none">WARNING: The TCP backlog setting of 511 cannot be enforced because &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn is set to the lower value of 128.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决:</p><pre class="line-numbers language-none"><code class="language-none">echo &quot;net.core.somaxconn &#x3D; 1024&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.confsysctl -p并且在docker run命令启动时，添加--sysctl net.core.somaxconn&#x3D;511 \即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><h3 id="redis持久化"><a href="#redis持久化" class="headerlink" title="redis持久化"></a>redis持久化</h3><p>Redis提供了不同范围的持久性选项：</p><ul><li><p><strong>RDB</strong>（Redis数据库）：RDB持久性按指定的时间间隔执行数据集的时间点快照。</p></li><li><p><strong>AOF</strong>（仅附加文件）：AOF持久性记录服务器接收的每个写入操作，这些操作将在服务器启动时再次播放，以重建原始数据集。使用与Redis协议本身相同的格式记录命令，并且采用仅追加方式。当日志太大时，Redis可以在后台重写日志。</p></li><li><p><strong>无持久性</strong>：如果希望，只要服务器正在运行，数据就一直存在，则可以完全禁用持久性。</p></li><li><p><strong>RDB + AOF</strong>：可以在同一实例中同时合并AOF和RDB。请注意，在这种情况下，当Redis重新启动时，AOF文件将用于重建原始数据集，因为它可以保证是最完整的。</p></li></ul><p>要理解的最重要的事情是RDB与AOF持久性之间的不同权衡</p><p>详见：<a href="https://redis.io/topics/persistence">redis持久化文档</a></p><h3 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h3><p>docker run 命令参数：</p><ul><li>-p 将容器端口映射到宿主机端口，格式为：<strong>宿主机端口:容器端口</strong></li><li>-v 将宿主机目录挂在到容器内，格式为：<strong>宿主机目录:容器目录</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是mysqlpump</title>
      <link href="posts/cf36362e/"/>
      <url>posts/cf36362e/</url>
      
        <content type="html"><![CDATA[<p>数据库备份有物理备份和逻辑备份两种形式，下面简单介绍这两种备份方式的区别，但不会太深入，毕竟本文的重点是mysqlpump。</p><ul><li><p>物理备份是将数据库的数据存储文件直接打包备份，也有些工具可以做物理备份。优点有：操作简单、恢复速度快；缺点有：版本兼容问题、数据有损坏的几率。可用于冷备份。</p></li><li><p>逻辑备份是将数据库的结构/数据/存储过程（甚至是数据库用户表）以sql等形式，从数据库中导出。这种备份方式多是使用工具。优点有：数据库无关、平台无关、数据完整等；缺点有：导出/导入速度慢等。可用于热备份。</p></li></ul><p>常用的逻辑备份工具有：mysqldump、mysqldumper等，本文将介绍自MySQL 5.7引入的新客户端工具mysqlpump，这个是作为mysqldump的继任者身份出现的，所以其设计和性能上是优于mysqldump的，下面介绍mysqlpump的特点。</p><ul><li>并行处理数据库以及数据库中的对象，以加快导出速度</li><li>更好地控制要转储的数据库和数据库对象（表，存储的程序，用户帐户）</li><li>创建压缩输出的能力</li><li>导入数据时，<code>InnoDB</code>通过在插入行后添加索引，可以更快地为表创建二级索引</li><li>导出进度展示（估计值）</li></ul><h2 id="mysqlpump使用"><a href="#mysqlpump使用" class="headerlink" title="mysqlpump使用"></a>mysqlpump使用</h2><p>mysqlpump使用方法：</p><ul><li>mysqlpump [OPTIONS] [–all-databases]</li><li>mysqlpump [OPTIONS] –databases DB1 [DB2 DB3…]</li><li>mysqlpump [OPTIONS] database [tables]</li></ul><p>常用mysqlpump参数</p><ul><li><p>–user=username –password 指定用户名，稍后输入密码</p></li><li><p>–default-parallelism=4 用4个线程去并发导出数据，每个表最多可以被一个线程操作</p></li><li><p>–exclude-databases=name 除了指定的库，其余库都导出。默认是导出所有库</p></li><li><p>–exclude-routines=name 除了指定的存储过程，其余存储过程都导出。默认是导出所有存储过程</p></li><li><p>–exclude-tables=name 除了指定的表，其余表都导出。默认是导出所有表</p></li><li><p>–include-tables=name 如果没有对应的exclude，只导出此参指定的表才会。如果有对应的exclude，则两者取并集。databases/routines都可以被include修饰</p></li><li><p>–no-create-db 不生成 create db语句。默认会生成。</p></li><li><p>–add-drop-table 在create table前加上drop if exist语句。默认不加。database/user都可以被add-drop修饰</p></li><li><p>–compress-output=algorithm 启用压缩，算法可选ZLIB、LZ4</p><pre class="line-numbers language-none"><code class="language-none">mysqlpump –compress-output&#x3D;ZLIB &gt; dump.zlib 压缩导出zlib_decompress dump.zlib dump.txt 解压缩<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="mysqldump对比mysqlpump"><a href="#mysqldump对比mysqlpump" class="headerlink" title="mysqldump对比mysqlpump"></a>mysqldump对比mysqlpump</h2><p>简单的说，mysqlpump是对mysqldump的升级，使用了多线程来并发导出多个表，在表比较多的情况下，能显著提高导出速度。不过由于mysqlpump中，每张表只能被一个线程导出，所以对于单表内容多的情况下，两者并无太大差别。</p><p>参考：</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/mysqlpump.html">mysql-mysqlpump</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
          <category> what&#39;s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何修改mysql的数据库名</title>
      <link href="posts/60f5d476/"/>
      <url>posts/60f5d476/</url>
      
        <content type="html"><![CDATA[<p>使用脚本，安全且方便的将旧库<strong>改名</strong>为新库。</p><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;basholddbname&#x3D;&quot;old&quot;newdbname&#x3D;&quot;new&quot;mysql -h localhost -uroot -p&#39;xxxxxx&#39; -e &#39;create database if not exists $&#123;olddbname&#125;;&#39;list_table&#x3D;$(mysql -h localhost -uroot -p&#39;xxxxxx&#39; -Nse &quot;select table_name from information_schema.TABLES where TABLE_SCHEMA&#x3D;&#39;$&#123;newdbname&#125;&#39;&quot;)for table in $list_tabledo    mysql -h localhost -uroot -p&#39;xxxxxx&#39; -e &quot;rename table $&#123;newdbname&#125;.$table to $&#123;olddbname&#125;.$table&quot;done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>操作步骤</strong></p><p>将上述代码保存为shell脚本，修改olddbname和newdbname，以及数据库密码。运行该脚本即可。</p><p><strong>解释</strong></p><p>olddbname: 旧库名称</p><p>newdbname: 新库名称</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何安装docker-ce</title>
      <link href="posts/2d4a7e59/"/>
      <url>posts/2d4a7e59/</url>
      
        <content type="html"><![CDATA[<blockquote><p>简单介绍下docker相关组件</p><p>containerd.io – daemon to interface with the OS API (in this case, LXC – Linux Containers), essentially decouples Docker from the OS, also provides container services for non-Docker container managers</p><p>docker-ce – Docker daemon, this is the part that does all the management work, requires the other two on Linux</p><p>docker-ce-cli – CLI tools to control the daemon, you can install them on their own if you want to control a remote Docker daemon</p><p>引用自： <a href="https://www.reddit.com/r/docker/comments/dsr6y2/containerdio_vs_dockercecli_vs_dockerce_what_are/">reddit</a></p></blockquote><p>话不多说，直接开干！</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><pre class="line-numbers language-none"><code class="language-none">yum install -y yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置yum源(国内用户最好设置国内yum源)</p><pre class="line-numbers language-none"><code class="language-none">#国内yum源yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo# 国外yum源yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看所有仓库中所有docker版本，并选择特定版本安装</p><pre class="line-numbers language-none"><code class="language-none">yum list docker-ce --showduplicates | sort -r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装docker</p><pre class="line-numbers language-none"><code class="language-none">#(最新版) 由于repo中默认只开启stable仓库，故这里安装的是最新稳定版# yum install docker-ceyum install docker-ce docker-ce-cli containerd.io#（指定版本）yum install &lt;FQPN&gt;  # 例如：sudo yum install docker-ce-17.12.0.ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注： 安装时，注意指纹应该为<code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code></p><p>启动并加入开机启动</p><pre class="line-numbers language-none"><code class="language-none">systemctl start dockersystemctl enable docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>验证是否安装成功</p><pre class="line-numbers language-none"><code class="language-none">docker version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h2><p>鉴于国内访问dockerhub网速不够快，我们可以配置国内的镜像太提高下载速度。</p><p>此处配置的是公司账号下的阿里云镜像，可自行选择要使用的国内镜像站。</p><p>针对Docker客户端版本大于 1.10.0 的用户 您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p><pre class="line-numbers language-none"><code class="language-none">sudo mkdir -p &#x2F;etc&#x2F;dockersudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;&#123;  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;yourcompany.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看是否配置成功</p><pre class="line-numbers language-none"><code class="language-none">docker info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至此，docker-ce安装完毕</p><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><p>如果需要用到docker-compose来编排容器，那么还需要安装docker-compose。</p><p>下载二进制文件</p><pre class="line-numbers language-none"><code class="language-none">sudo curl -L &quot;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.29.0&#x2F;docker-compose-$(uname -s)-$(uname -m)&quot; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>给予执行权限</p><pre class="line-numbers language-none"><code class="language-none">sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试是否安装成功</p><pre class="line-numbers language-none"><code class="language-none">docker-compose --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>docker-compose常用命令</p><pre class="line-numbers language-none"><code class="language-none"># 用当前文件夹下的docker-compose.yml文件，后台启动docker-compose up -d      # 指定xxx.yaml文件，在后台启动该服务docker-compose -f xxx.yaml up -d # 停止正在运行的容器，可以通过docker-compose start再次启动docker-compose stop [SERVICE…] # 停止yml中的所有容器docker-compose -f xxx.yaml stop# 停止和删除容器、网络、卷、镜像docker-compose down [options] # 用于删除已停止的 Compose 应用。docker-compose rmdocker-compose psdocker-compose --help<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：</p><p><a href="https://docs.docker.com/engine/install/centos/">docker-install</a></p><p><a href="https://docs.docker.com/compose/install/">docker-compose-install</a></p>]]></content>
      
      
      <categories>
          
          <category> install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
